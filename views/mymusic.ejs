<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>My Music</title>
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css"
    integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">
  <style>
    .circle-wrapper img {
      height: 64px;
      width: 64px;
      border-radius: 50%;
    }


    .artist-popularity,
    .track-popularity {
      display: inline-block;
      margin-left: 20px;
    }

    .played-at {
      margin-left: 20px;
    }

    .ui-autocomplete {
      max-height: 240px;
      background-color: #eee;
      overflow-y: auto;
      overflow-x: hidden;
      list-style: none;
      margin: 0;
      padding: 0;
      cursor: pointer;

    }

    .autocomplete-item {
      height: 60px;
      line-height: 60px;
      padding-left: 15px;
    }

    .ui-state-active {
      background: #fefefe;
    }
  </style>
</head>

<body>
  <div class="container">
    <div class="row">
      <div class="top-profile" style="vertical-align: middle;">
        <img id="profile-pic" src="<%= response[0].data.images[0].url %>" alt="display pic"
          style="width: 70px; border-radius: 50%; margin: 10px;">
        <span style="font-size: 26px;" id="display-name"><%= response[0].data.display_name %>
        </span>
      </div>
    </div>
    <div class="row" id="serach" style="margin-bottom: 120px;">
      <form id="search-artist" class="form-horizontal col-sm-6 col-md-6" role="form">
        <label for="artist-search">Search an artist :</label>
        <input id="artist-search" class="form-control" placeholder="Search for an Artist">
      </form>
    </div>

    <div class="row">
      <div class="col-md-6">
        <h3>Your Top 10 Artists</h3>
        <div id="select-group" class="form-group">
          <label for="top-artists-time">Select time period :</label>
          <select class="form-control" id="top-artists-time">
            <option value="short_term">Last month</option>
            <option value="medium_term">Last 6 months</option>
            <option value="long_term">All time</option>
          </select>
        </div>
        <div class="col-md-12" id="my-top-artists"></div>
      </div>

      <div class="col-md-6">
        <h3>Your Top 10 Tracks</h3>
        <div id="select-group1" class="form-group">
          <label for="top-tracks-time">Select time period :</label>
          <select class="form-control" id="top-tracks-time">
            <option value="short_term">Last month</option>
            <option value="medium_term">Last 6 months</option>
            <option value="long_term">All time</option>
          </select>
        </div>
        <div class="col-md-12" id="my-top-tracks"></div>
      </div>
    </div>

    <div class="row my-4">
      <div class="col-md-12">
        <h3>Your Listening History</h3>
        <div id="my-history"></div>
      </div>
    </div>

    <div class="row my-4">
      <div class="col-md-12">
        <h3>Your Genre</h3>
        <div id="my-genre"></div>
      </div>
    </div>

    <footer class="row mt-5">
      <div class="col-md-12">
        <p class="footer-copyright" style="text-align: center;">
          © 2020 Travis Chan • Made with <span style="color: #03B875;">&#9829;</span> in Davis
        </p>
      </div>
    </footer>
  </div>



  <script src="https://code.jquery.com/jquery-3.4.1.min.js"
    integrity="sha256-CSXorXvZcTkaix6Yvo6HppcZGetbYMGWSFlBw8HfCJo=" crossorigin="anonymous"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js"
    integrity="sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1"
    crossorigin="anonymous"></script>
  <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js"
    integrity="sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM"
    crossorigin="anonymous"></script>
  <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.min.js"
    integrity="sha256-VazP97ZCwtekAsvgPBSUwPFKdrwD3unUfSGVYrahUqU=" crossorigin="anonymous"></script>
  <script>
    $(function () {

      /**
         * Obtains parameters from the URL
         * @return Object
         */
      function getUrlVars() {
        var vars = [], hash;
        var hashes = window.location.href.slice(window.location.href.indexOf('?') + 1).split('&');
        for (var i = 0; i < hashes.length; i++) {
          hash = hashes[i].split('=');
          vars.push(hash[0]);
          vars[hash[0]] = hash[1];
        }
        return vars;
      }

      const params = getUrlVars();

      const access_token = params.access_token,
        refresh_token = params.refresh_token,
        error = params.error;

      if (error) {
        alert('There was an error during the authentication');
      } else {
        if (access_token) {
          // render oauth info
          const options = {
            headers: { Authorization: "Bearer " + access_token },
            json: true
          };

          // Find occurence of each element in an array
          function findArray(arr) {
            var a = [], b = [], prev;

            arr.sort();
            for (var i = 0; i < arr.length; i++) {
              if (arr[i] !== prev) {
                a.push(arr[i]);
                b.push(1);
              } else {
                b[b.length - 1]++;
              }
              prev = arr[i];
            }

            return [a, b];
          }

          // Get Personal Profile
          async function getPersonalProfile() {
            try {
              const response = await fetch('https://api.spotify.com/v1/me', options);
              const data = await response.json();
            } catch (err) {
              console.log(err);
            }
          }

          // Get Genre
          async function getGenre() {
            try {
              // Get data
              const limit = 50;
              const response = await fetch(
                // NOTE Change limit to 50 later
                `https://api.spotify.com/v1/me/top/artists/?limit=${limit}&time_range=short_term`,
                options
              );
              const data = await response.json();
              // Assign all genre into an array
              let genreArray = [];
              data.items.forEach((item, index) => {
                genreArray = genreArray.concat(item.genres);

              });
              console.log(genreArray);

              // Sort genre and corresponding occurence 
              let [cleanedGenreArray, genreOccurenceArray] = findArray(genreArray);
              console.log(cleanedGenreArray, genreOccurenceArray);

              let sortedGenreArray = cleanedGenreArray.sort(function (a, b) {
                return genreOccurenceArray[cleanedGenreArray.indexOf(a)] < genreOccurenceArray[cleanedGenreArray.indexOf(b)] ? 1 : -1;
              });
              let sortedOccurenceArray = genreOccurenceArray.sort((a, b) => b - a);
              console.log(sortedGenreArray, sortedOccurenceArray);

              // Render result by looping through each genre
              sortedGenreArray.forEach((item, index) => {
                const genrePercent = parseInt(sortedOccurenceArray[index] / limit * 100);
                const val = `<p>${index + 1} ${item} ${genrePercent}%</p>`;
                $("#my-genre").append(val);
              });
            } catch (err) {
              console.log(err);
            }
          }

          async function getTopTen(type, range) {
            try {
              const response = await fetch(
                `https://api.spotify.com/v1/me/top/${type}/?limit=10&time_range=${range}`,
                options
              );
              const data = await response.json();
              if (type === 'artists') {
                $("#my-top-artists").empty();
                data.items.forEach((item, index) => {
                  let popularityColor = "lightgreen";
                  if (item.popularity < 60)
                    popularityColor = "lightsalmon";
                  else if (item.popularity < 80)
                    popularityColor = "lightskyblue";
                  // console.log(item);
                  const val = `<div style="display:inline-block" class="circle-wrapper mr-2 mb-2"><img src=${item.images[2].url} alt=${item.name}></div>` +
                    `<p style="display:inline-block">${index + 1}. ${item.name}</p>` +
                    `<span class="artist-popularity" style="background-color:${popularityColor}">${item.popularity}</span><br>`;
                  $("#my-top-artists").append(val);

                });
              } else if (type === 'tracks') {
                $("#my-top-tracks").empty();
                data.items.forEach((item, index) => {
                  let popularityColor = "lightgreen";
                  if (item.popularity < 60)
                    popularityColor = "lightsalmon";
                  else if (item.popularity < 80)
                    popularityColor = "lightskyblue";

                  const val = `<div style="display:inline-block" class="circle-wrapper mr-2 mb-2"><img src=${item.album.images[2].url} alt=${item.name}></div>` +
                    `<p style="display:inline-block">${index + 1}. ${item.artists[0].name} - ${item.name}</p>` +
                    `<span class="track-popularity" style="background-color:${popularityColor}">${item.popularity}</span><br>`;;
                  $("#my-top-tracks").append(val);
                });
              }
            } catch (err) {
              console.log(err);
            }
          }

          async function getHistory() {
            try {
              const response = await fetch("https://api.spotify.com/v1/me/player/recently-played", options);
              const data = await response.json();
              data.items.forEach((item, index) => {
                let popularityColor = "lightgreen";
                if (item.track.popularity < 60)
                  popularityColor = "lightsalmon";
                else if (item.popularity < 80)
                  popularityColor = "lightskyblue";

                const dateObj = new Date(item.played_at);
                const month = dateObj.getUTCMonth() + 1; //months from 1-12
                const day = dateObj.getUTCDate();
                const year = dateObj.getUTCFullYear();

                const newDate = day + "/" + month + "/" + year + ' ' + dateObj.toLocaleTimeString();


                const val = `<div style="display:inline-block" class="circle-wrapper mr-2 mb-2"><img src=${item.track.album.images[2].url} alt=${item.track.name}></div>` +
                  `<p style="display:inline-block">${index + 1}. ${item.track.artists[0].name} - ${item.track.name}</p>` +
                  `<span class="track-popularity" style="background-color:${popularityColor}">${item.track.popularity}</span>` + `<span class="played-at">Played at ${newDate}</span > ` + `<br>`;
                $("#my-history").append(val);
              });

            } catch (err) {
              console.log(err);
            }
          }

          // Get Top 10 Artists
          getTopTen("artists", $('#top-artists-time').val());
          $('#top-artists-time').change(() => {
            getTopTen("artists", $('#top-artists-time').val());
          })

          // Get Top 10 Tracks
          getTopTen("tracks", $('#top-tracks-time').val());
          $('#top-tracks-time').change(() => {
            getTopTen("tracks", $('#top-tracks-time').val());
          })

          // Get History
          getHistory();

          // Get Genre
          getGenre();

          // Adjust width of menu
          jQuery.ui.autocomplete.prototype._resizeMenu = function () {
            var ul = this.menu.element;
            ul.outerWidth(this.element.outerWidth());
          }


          $('#artist-search').autocomplete({
            minLength: 0,
            source: async function (request, response) {
              try {
                // '+' sign represents a space, this prevents blank search bar giving error
                const artistResponse = await fetch(`https://api.spotify.com/v1/search?type=artist&q=${request.term}+`, options);
                const data = await artistResponse.json();
                if (data.artists && data.artists.items.length) {
                  let res = [];
                  data.artists.items.forEach(artist => {
                    res.push(artist);
                  })
                  console.log(data.artists);
                  response(res);
                } else {
                  response([]);
                }
              } catch (err) {
                console.log(err);
                return;
              }
            },
            select: function (event, ui) {
              $('#artist-search').val(ui.item.name);
              return false;
            }
          })
            .autocomplete('instance')._renderItem = function (ul, item) {
              if (!item) return;
              const val = `<div class="autocomplete-item"> ${item.name} </div>`;
              return $("<li></li>").data("item.autocomplete", item).append(val).appendTo(ul);
            };




        } else {
          // render initial screen
          window.location = "http://localhost:3000";
        }

      }
    })
  </script>
</body>

</html>