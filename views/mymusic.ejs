<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>My Music</title>
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css"
    integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">
  <style>
    html,
    body {
      overflow-x: hidden;
    }

    .close-btn {
      position: absolute;
      right: 12px;
      top: 8px;
      font-size: 20px;
      cursor: pointer;
      padding: 2px 12px;
      border-radius: 50%;
      background-color: #ddd;
      opacity: 0.6;
      transition: all 100ms ease;
    }

    .close-btn:hover {
      opacity: 0.9;
    }



    .side-menu {
      position: fixed;
      z-index: 2;
      background-color: #eee;
      width: 300px;
      height: 100%;
      right: -300px;
      transition: all 400ms ease;
      transform: translateZ(0);
    }

    .side-open .side-menu {
      right: 0;
    }

    .artist-side-profile p {
      margin-left: 6px;
    }

    .artist-side-profile img {
      width: 100%;

    }

    .circle-wrapper img {
      height: 64px;
      width: 64px;
      border-radius: 50%;
    }

    .top-artists-wrapper,
    .top-tracks-wrapper {
      cursor: pointer;
    }

    .artist-popularity,
    .track-popularity {
      display: inline-block;
      margin-left: 20px;
    }

    .played-at {
      margin-left: 20px;
    }

    .ui-autocomplete {
      max-height: 240px;
      background-color: #eee;
      overflow-y: auto;
      overflow-x: hidden;
      list-style: none;
      margin: 0;
      padding: 0;
      cursor: pointer;

    }

    .autocomplete-item {
      height: 60px;
      line-height: 60px;
      padding-left: 15px;
    }

    .ui-state-active {
      background: #fefefe;
    }

    .progress {
      width: 50%;
    }

    .genre-row {
      display: flex;
      flex-direction: row;
      justify-content: space-between;
    }

    .genre-progress-bar {
      background-color: #1db954;
      color: white;
    }
  </style>
</head>

<body>
  <div class="container">
    <div class="side-menu">
      <span class="close-btn">x</span>
      <div class="artist-side-profile">
        <p>Artist Info</p>
      </div>
    </div>
    <div class="row">
      <div class="top-profile" style="vertical-align: middle;">
        <img id="profile-pic" src="<%= response[0].data.images[0].url %>" alt="display pic"
          style="width: 70px; border-radius: 50%; margin: 10px;">
        <span style="font-size: 26px;" id="display-name"><%= response[0].data.display_name %>
        </span>
      </div>
    </div>
    <div class="row" id="serach" style="margin-bottom: 120px;">
      <form id="search-artist" class="form-horizontal col-sm-6 col-md-6" role="form">
        <label for="artist-search">Search an artist :</label>
        <input id="artist-search" class="form-control" placeholder="Search for an Artist">
      </form>
    </div>

    <div class="row">
      <div class="col-md-6">
        <h3>Your Top 10 Artists</h3>
        <div id="select-group" class="form-group">
          <label for="top-artists-time">Select time period :</label>
          <select class="form-control" id="top-artists-time">
            <option value="short_term">Last month</option>
            <option value="medium_term">Last 6 months</option>
            <option value="long_term">All time</option>
          </select>
        </div>
        <div class="col-md-12" id="my-top-artists"></div>
      </div>

      <div class="col-md-6">
        <h3>Your Top 10 Tracks</h3>
        <div id="select-group1" class="form-group">
          <label for="top-tracks-time">Select time period :</label>
          <select class="form-control" id="top-tracks-time">
            <option value="short_term">Last month</option>
            <option value="medium_term">Last 6 months</option>
            <option value="long_term">All time</option>
          </select>
        </div>
        <div class="col-md-12" id="my-top-tracks"></div>
      </div>
    </div>

    <div class="row my-4">
      <div class="col-md-12">
        <h3>Your Listening History</h3>
        <div id="my-history"></div>
      </div>
    </div>

    <div class="row my-4">
      <div class="col-md-6">
        <h3>Your Top Genre Presence</h3>
        <div class="form-group">
          <label for="top-genre-time">Select time period :</label>
          <select class="form-control" id="top-genre-time">
            <option value="short_term">Last month</option>
            <option value="medium_term">Last 6 months</option>
            <option value="long_term">All time</option>
          </select>
        </div>
        <div class="loading-div">Loading...</div>
        <div id="my-genre"></div>
      </div>
    </div>

    <footer class="row mt-5">
      <div class="col-md-12">
        <p class="footer-copyright" style="text-align: center;">
          © 2020 Travis Chan • Made with <span style="color: #03B875;">&#9829;</span> in Davis
        </p>
      </div>
    </footer>
  </div>



  <script src="https://code.jquery.com/jquery-3.4.1.min.js"
    integrity="sha256-CSXorXvZcTkaix6Yvo6HppcZGetbYMGWSFlBw8HfCJo=" crossorigin="anonymous"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js"
    integrity="sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1"
    crossorigin="anonymous"></script>
  <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js"
    integrity="sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM"
    crossorigin="anonymous"></script>
  <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.min.js"
    integrity="sha256-VazP97ZCwtekAsvgPBSUwPFKdrwD3unUfSGVYrahUqU=" crossorigin="anonymous"></script>
  <script>
    $(function () {

      /**
         * Obtains parameters from the URL
         * @return Object
         */
      function getUrlVars() {
        var vars = [], hash;
        var hashes = window.location.href.slice(window.location.href.indexOf('?') + 1).split('&');
        for (var i = 0; i < hashes.length; i++) {
          hash = hashes[i].split('=');
          vars.push(hash[0]);
          vars[hash[0]] = hash[1];
        }
        return vars;
      }

      const params = getUrlVars();

      const access_token = params.access_token,
        refresh_token = params.refresh_token,
        error = params.error;

      if (error) {
        alert('There was an error during the authentication');
      } else {
        if (access_token) {
          // render oauth info
          const options = {
            headers: { Authorization: "Bearer " + access_token },
            json: true
          };

          // Loading div, not really working
          const $loading = $('.loading-div').hide();
          $(document)
            .ajaxStart(function () {
              $loading.show();
            })
            .ajaxStop(function () {
              $loading.hide();
            });

          // Find occurence of each element in an array
          function findArray(arr) {
            var a = [], b = [], prev;

            arr.sort();
            for (var i = 0; i < arr.length; i++) {
              if (arr[i] !== prev) {
                a.push(arr[i]);
                b.push(1);
              } else {
                b[b.length - 1]++;
              }
              prev = arr[i];
            }

            return [a, b];
          }

          // Sort two arrays
          function sortTwoArrays(bigArray) {
            // Sort genre and corresponding occurence 
            let [cleanedGenreArray, genreOccurenceArray] = findArray(bigArray);
            // console.log(cleanedGenreArray, genreOccurenceArray);

            let sortedGenreArray = cleanedGenreArray.sort(function (a, b) {
              return genreOccurenceArray[cleanedGenreArray.indexOf(a)] < genreOccurenceArray[cleanedGenreArray.indexOf(b)] ? 1 : -1;
            });
            let sortedOccurenceArray = genreOccurenceArray.sort((a, b) => b - a);
            return [sortedGenreArray, sortedOccurenceArray];
          }

          // Get Personal Profile
          async function getPersonalProfile() {
            try {
              const response = await fetch('https://api.spotify.com/v1/me', options);
              const data = await response.json();
            } catch (err) {
              console.log(err);
            }
          }

          async function getGenreFromTracks(data) {
            try {
              // Get top tracks
              // const response = await fetch(
              //   `https://api.spotify.com/v1/me/top/tracks?limit=20`,
              //   options
              // );
              // const data = await response.json();

              // Get all artists ID from top tracks        
              let artistID = [];
              let artistName = [];
              data.items.forEach((item, index) => {
                item.artists.forEach(artist => {
                  artistID.push(artist.id);
                  artistName.push(artist.name);
                })
              });
              // Keep duplicates in the array, because that represents your music taste

              // Get indiviual artists for their genres
              let genreArray = [];
              await Promise.all(artistID.map(async (id) => {
                const response = await fetch(
                  `https://api.spotify.com/v1/artists/${id}`,
                  options
                );
                const data = await response.json();
                genreArray = genreArray.concat(data.genres);
              }));
              // console.log(genreArray);

              const [sortedGenreArray, sortedOccurenceArray] = sortTwoArrays(genreArray);
              // console.log([sortedGenreArray, sortedOccurenceArray]);
              return [sortedGenreArray, sortedOccurenceArray];

            } catch (err) {
              console.log(err);
              return;
            }
          }

          // Get Genre
          async function getGenre(range) {
            try {
              // Get data from multiple endpoints
              // Endpoint 1: Get genre from top artists
              // Endpoint 2: Get genre from top tracks' artists
              const limit = 50;
              const responses = await Promise.all([
                fetch(`https://api.spotify.com/v1/me/top/artists/?limit=${limit}&time_range=${range}`, options),
                fetch(`https://api.spotify.com/v1/me/top/tracks?limit=${limit}&time_range=${range}`, options)
              ]);
              const data = await Promise.all(
                responses.map(async response => {
                  return await response.json();
                })
              );

              $("#my-genre").empty();

              // Endpoint 1: Assign all genres into an array
              let genreArray = [];
              data[0].items.forEach((item, index) => {
                genreArray = genreArray.concat(item.genres);
              });
              const [sortedGenreArray1, sortedOccurenceArray1] = sortTwoArrays(genreArray);

              // Endpoint 2:
              const [sortedGenreArray2, sortedOccurenceArray2] = await getGenreFromTracks(data[1]);

              // Combining two endpoints
              const unsortedGenreArray = [...sortedGenreArray1, ...sortedGenreArray2];
              const unsortedOccurenceArray = [...sortedOccurenceArray1, ...sortedOccurenceArray2];

              unsortedGenreArray.forEach((genre, index) => {
                if (index + 1 < unsortedGenreArray.length) {
                  // Get the index of the second duplicated item
                  const secondIndex = unsortedGenreArray.indexOf(genre, index + 1);
                  // Run if an item is found
                  if (secondIndex !== -1) {
                    unsortedOccurenceArray[index] = unsortedOccurenceArray[index] + unsortedOccurenceArray[secondIndex];
                    // Remove the duplicated item from both arrays
                    unsortedOccurenceArray.splice(secondIndex, 1);
                    unsortedGenreArray.splice(secondIndex, 1);
                  }
                }
              });

              // Sort the two final arrays
              let sortedGenreArray = unsortedGenreArray.sort(function (a, b) {
                return unsortedOccurenceArray[unsortedGenreArray.indexOf(a)] < unsortedOccurenceArray[unsortedGenreArray.indexOf(b)] ? 1 : -1;
              });
              let sortedOccurenceArray = unsortedOccurenceArray.sort((a, b) => b - a);

              // Render result by looping through each genre
              sortedGenreArray.forEach((item, index) => {
                // Limit results to 15 or less
                if (index <= 14) {
                  const lengthOfData = data[0].items.length + data[1].items.length;
                  const genrePercent = parseInt(sortedOccurenceArray[index] / lengthOfData * 100);
                  const val = `<div class="genre-row"><span>${index + 1}. ${item}</span>` + `<div class="progress"><div class="progress-bar genre-progress-bar" role="progressbar" aria-valuenow="${genrePercent}" aria-valuemin="0" aria-valuemax="100" style="width:${genrePercent}%">${genrePercent}%</div></div></div>` + `<br>`;
                  $("#my-genre").append(val);
                }
              });
            } catch (err) {
              console.log(err);
            }
          }

          async function getTopTen(type, range) {
            try {
              const response = await fetch(
                `https://api.spotify.com/v1/me/top/${type}/?limit=10&time_range=${range}`,
                options
              );
              const data = await response.json();
              if (type === 'artists') {
                $("#my-top-artists").empty();
                data.items.forEach((item, index) => {
                  let popularityColor = "lightgreen";
                  if (item.popularity < 60)
                    popularityColor = "lightsalmon";
                  else if (item.popularity < 80)
                    popularityColor = "lightskyblue";
                  const val = `<div class="top-artists-wrapper" id="${item.id}"><div style="display:inline-block" class="circle-wrapper mr-2 mb-2"><img src=${item.images[2].url} alt=${item.name}></div>` +
                    `<p style="display:inline-block">${index + 1}. ${item.name}</p>` +
                    `<span class="artist-popularity" style="background-color:${popularityColor}">${item.popularity}</span></div>` + `<br>`;
                  $("#my-top-artists").append(val);

                });
              } else if (type === 'tracks') {
                $("#my-top-tracks").empty();
                data.items.forEach((item, index) => {
                  let popularityColor = "lightgreen";
                  if (item.popularity < 60)
                    popularityColor = "lightsalmon";
                  else if (item.popularity < 80)
                    popularityColor = "lightskyblue";

                  const val = `<div class="top-tracks-wrapper"><div style="display:inline-block" class="circle-wrapper mr-2 mb-2"><img src=${item.album.images[2].url} alt=${item.name}></div>` +
                    `<p style="display:inline-block">${index + 1}. ${item.artists[0].name} - ${item.name}</p>` +
                    `<span class="track-popularity" style="background-color:${popularityColor}">${item.popularity}</span></div>` + `<br>`;;
                  $("#my-top-tracks").append(val);
                });
              }
            } catch (err) {
              console.log(err);
            }
          }

          async function getHistory() {
            try {
              const response = await fetch("https://api.spotify.com/v1/me/player/recently-played", options);
              const data = await response.json();
              data.items.forEach((item, index) => {
                let popularityColor = "lightgreen";
                if (item.track.popularity < 60)
                  popularityColor = "lightsalmon";
                else if (item.popularity < 80)
                  popularityColor = "lightskyblue";

                const dateObj = new Date(item.played_at);
                const month = dateObj.getUTCMonth() + 1; //months from 1-12
                const day = dateObj.getUTCDate();
                const year = dateObj.getUTCFullYear();

                const newDate = day + "/" + month + "/" + year + ' ' + dateObj.toLocaleTimeString();


                const val = `<div style="display:inline-block" class="circle-wrapper mr-2 mb-2"><img src=${item.track.album.images[2].url} alt=${item.track.name}></div>` +
                  `<p style="display:inline-block">${index + 1}. ${item.track.artists[0].name} - ${item.track.name}</p>` +
                  `<span class="track-popularity" style="background-color:${popularityColor}">${item.track.popularity}</span>` + `<span class="played-at">Played at ${newDate}</span > ` + `<br>`;
                $("#my-history").append(val);
              });

            } catch (err) {
              console.log(err);
            }
          }

          // Get Top 10 Artists
          getTopTen("artists", $('#top-artists-time').val());
          $('#top-artists-time').change(() => {
            getTopTen("artists", $('#top-artists-time').val());
          })

          // Get Top 10 Tracks
          getTopTen("tracks", $('#top-tracks-time').val());
          $('#top-tracks-time').change(() => {
            getTopTen("tracks", $('#top-tracks-time').val());
          })

          // Get History
          getHistory();

          // Get Genre
          getGenre($('#top-genre-time').val());
          $('#top-genre-time').change(() => {
            getGenre($('#top-genre-time').val());
          })

          // Click on top artists
          let searchArtistId;
          $('#my-top-artists').on('click', async e => {
            // Toggle side menu
            if (!$('body').hasClass('side-open')) {
              $('body').addClass('side-open');
            }
            // return false;

            // Get id of selected artist
            searchArtistId = $(e.target).closest('.top-artists-wrapper').attr("id");


            // Fetch artist data
            try {
              const response = await fetch(`https://api.spotify.com/v1/artists/${searchArtistId}`, options);
              const data = await response.json();
              console.log(data);
              $('.artist-side-profile').empty();
              // Get genre
              const artistGenres = data.genres.toString();

              // Render result in side menu
              const val = `<div><img src=${data.images[2].url} alt=${data.name}></div>` + `<p style="font-size: 24px;">${data.name}</p>` + `<p>${artistGenres}</p>`;
              $('.artist-side-profile').append(val);
            } catch (err) {
              console.log(err);
            }
          });

          // Close button in side menu
          $('.close-btn').click(e => {
            $('body').removeClass('side-open');
          })

          // Adjust width of drop down menu
          jQuery.ui.autocomplete.prototype._resizeMenu = function () {
            var ul = this.menu.element;
            ul.outerWidth(this.element.outerWidth());
          }

          // Search bar
          $('#artist-search').autocomplete({
            minLength: 0,
            source: async function (request, response) {
              try {
                // '+' sign represents a space, this prevents blank search bar giving error
                const artistResponse = await fetch(`https://api.spotify.com/v1/search?type=artist&q=${request.term}+`, options);
                const data = await artistResponse.json();
                if (data.artists && data.artists.items.length) {
                  let res = [];
                  data.artists.items.forEach(artist => {
                    res.push(artist);
                  })
                  console.log(data.artists);
                  response(res);
                } else {
                  response([]);
                }
              } catch (err) {
                console.log(err);
                return;
              }
            },
            select: function (event, ui) {
              $('#artist-search').val(ui.item.name);
              return false;
            }
          })
            .autocomplete('instance')._renderItem = function (ul, item) {
              if (!item) return;
              const val = `<div class="autocomplete-item"> ${item.name} </div>`;
              return $("<li></li>").data("item.autocomplete", item).append(val).appendTo(ul);
            };


        } else {
          // render initial screen
          window.location = "https://localhost:3000";
        }

      }
    })
  </script>
</body>

</html>